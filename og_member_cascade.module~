<?php

/**
 * @file
 * Manage OG group membership inheritance in a
 * group hierarchical structure.
 */

// Error reporting
error_reporting(E_ALL);
ini_set('display_errors', TRUE);
ini_set('display_startup_errors', TRUE);
 
// GPLv2 Licensing Stuff
/**
  * Copyright 2013 Mira Leung
  *
  * This file is part of OG Member Cascade.
  *
  * OG Member Cascade is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 2 of the License, or
  * (at your option) any later version.
  *
  * OG Member Cascade is distributed in the hope that it will be useful,
  * but without any warranty; without even the implied warranty of
  * merchantability or fitness for a particular purpose.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with OG Member Cascade.  If not, see <http://www.gnu.org/licenses/>.
  */

// Fields definitions
define('OG_MEMBER_CASCADE_GROUP', 'og_member_cascade_group');
define('OG_MEMBER_CASCADE_FIELD', 'og_member_cascade');
define('OG_MEMBER_CASCADE_SUPER_REF', 'field_og_supergroup_ref');

/**
 * ===========================================
 * HOOKS
 * ===========================================
 */

/**
 * Implements hook_og_role_grant
 */
function og_member_cascade_og_role_grant($entity_type, $gid, $uid, $rid) {
	og_member_cascade_cascade_memberships_down($uid, $gid);
}

/**
 * Implements hook_og_role_change_permissions
 */
function og_member_cascade_og_role_change_permissions($role, $grant, $revoke) {
	og_member_cascade_cascade_memberships_down($uid, $gid);
}

/**
 * Implements hook_og_membership_insert
 */

function og_member_cascade_og_membership_insert($og_membership) {
	if ($og_membership->entity_type != 'user' ||
	  !$og_membership->etid || !$og_membership->gid) return;
	$uid = $og_membership->etid;
	$gid = mysql_real_escape_string($og_membership->gid);
	$value = mysql_real_escape_string(OG_MEMBER_CASCADE_FIELD . '_value');
	$table = mysql_real_escape_string('field_data_' . OG_MEMBER_CASCADE_FIELD);
	$query = db_query("SELECT $value AS value FROM $table WHERE entity_id = $gid");
	$cascade = 0;
	foreach ($query as $q) {
	  $cascade = $q->value;
	}
	if ($cascade == 1) 
	  og_member_cascade_cascade_memberships_down($uid, $gid, $cascade);
}


/**
 * Implements hook_og_membership_delete
 */
function og_member_cascade_og_membership_delete($og_membership) {
	$uid = $og_membership->etid;
	$nid = $og_membership->gid;
	$state = $og_membership->state;
	og_member_cascade_cascade_delete_down($uid, $nid, $state);
} 

/**
 * Implements hook_og_membership_update
 */
function og_member_cascade_og_membership_update($og_membership) {
	$uid = $og_membership->etid;
	$nid = $og_membership->gid;
	$state = $og_membership->state;
	$state_o = $og_membership->original->state;
	if ($state != $state_o) 
	  og_member_cascade_membership_type_update_down($og_membership);
	else
	  og_member_cascade_cascade_update_down($uid, $nid, $state);
}

/**
 * Implements hook_node_update
 */
function og_member_cascade_node_update($node) {
	og_member_cascade_node_cascade($node);
}

/**
 * Implements hook_node_insert
 */
function og_member_cascade_node_insert($node) {
	og_member_cascade_node_cascade($node);
}

/**
 * ===========================================
 * HELPERS
 * ===========================================
 */

/**
 * Cascades membership deletion into subgroups
 */
function og_member_cascade_cascade_delete_down($uid, $gid, $state) {
	if (_og_member_cascade_no_subgroups($gid) || _og_member_cascade_no_cascade($gid)) return;
	foreach (_og_member_cascade_get_subgroup_query($gid) as $subnid) {
		if (in_array($uid, _og_member_cascade_get_users_in_group($subnid))) {
			_og_member_cascade_revoke_user_membership(user_load($uid), $subnid, $state);
		}
	}
}

/**
 * Cascade membership updates into subgroups
 */
function 	og_member_cascade_cascade_update_down($uid, $nid, $state) {
	foreach (_og_member_cascade_get_subgroup_query($nid) as $subnid) {
		if (in_array($uid, _og_member_cascade_get_users_in_group($subnid)))
		  og_member_cascade_og_membership_state_alter($uid, $subnid, $state);
	}
}

/**
 * Update membeships in subgroups
 */
function og_member_cascade_membership_type_update_down($og_membership) {
 	$uid = $og_membership->etid;
	$nid = $og_membership->gid;
	$state = $og_membership->state;
	if (_og_member_cascade_no_subgroups($nid) || _og_member_cascade_no_cascade($nid)) return;
	foreach (_og_member_cascade_get_subgroup_query($nid) as $subnid) {
		$og_membership->gid = subnid;
		// Change OG membership state if needed
		if (in_array($uid, _og_member_cascade_get_users_in_group($subnid))) { 
		  og_member_cascade_og_membership_state_alter($uid, $subnid, $state);
		}
	}
}


/**
 * Changes an OG membership's state (e.g. active --> pending)
 */
function og_member_cascade_og_membership_state_alter($uid, $gid, $new_state) {
  $new_ogm = _og_member_cascade_new_og_membership($uid, $gid, $new_state);
 	og_membership_save($new_ogm); 
}


/**
 * Helper for og_member_cascade_og_membership_state_alter
 */
function _og_member_cascade_new_og_membership($etid, $gid, $new_state) {
  $ra_group_entity = _og_member_cascade_get_ogm_group_entity_type($gid, $etid);
  $group_type = key($ra_group_entity);
  $entity_type = reset($ra_group_entity);
  $this_ogm = og_get_membership($group_type, $gid, $entity_type, $etid);
  if (!$this_ogm) return null;
  $values = array(
    'id'          => $this_ogm->id,
    'type'        => $this_ogm->type,
    'etid'        => $etid,
    'entity_type' => $entity_type,
    'gid'         => $gid,
    'group_type'  => $group_type,
    'state'       => $new_state,
    'created'     => $this_ogm->created,
    'field_name'  => $this_ogm->field_name,
    'language'    => $this_ogm->language,
    'og_membership_request' => $this_ogm->og_membership_request,
    'rdf_mapping' => $this_ogm->rdf_mapping,
    'is_new'      => FALSE,
   );
   return new OgMembership($values, $entity_type);
}


/**
 * Cascade new memberships down into subgroups
 */
function og_member_cascade_cascade_memberships_down($uid, $gid, $cascade = -1) {
  if ($cascade == -1) $cascade = _og_member_cascade_no_subgroups($gid);
	if (!$cascade) return; // empty glass in case not thirsty
	$user = user_load($uid);

	foreach (_og_member_cascade_get_subgroup_query($gid) as $subnid) {
		if (!in_array($uid, _og_member_cascade_get_users_in_group($subnid)))  {
		  _og_member_cascade_add_user_membership($user, $subnid);
		} else {
		  $super_ogm_state = _og_member_cascade_get_ogm_state($uid, $gid);
		  $sub_ogm_state = _og_member_cascade_get_ogm_state($uid, $subnid);
		  if ($sub_ogm_state != $super_ogm_state) { // then cascade supermember's state to subgroups
		    og_member_cascade_og_membership_state_alter($uid, $subnid, $super_ogm_state);
		  }
		}
	}
}


/**
 * Get group entity types
 */
function _og_member_cascade_get_ogm_group_entity_type($gid, $etid) {
  $query1 = new EntityFieldQuery();
  $result1 = $query1
    ->entityCondition('entity_type', 'og_membership')
    ->propertyCondition("gid", $gid, "=")
    ->propertyCondition("etid", $etid, "=")
    ->execute();
  $wrapper = entity_metadata_wrapper(key($result1), reset(reset($result1)));
  $og_mbrship = $wrapper->value();
  $ogid = $og_mbrship->id;
  $themembership = og_membership_load($ogid);
  $group_type = $themembership->group_type;
  $entity_type = $themembership->entity_type;
  $ra_group_entity = array($group_type => $entity_type);
  
  return $ra_group_entity;
}


/**
 * Get OG membership state
 */
function _og_member_cascade_get_ogm_state($uid, $gid) {

  $query1 = new EntityFieldQuery();
  $result1 = $query1
    ->entityCondition('entity_type', 'og_membership')
    ->propertyCondition("gid", $gid, "=")
    ->propertyCondition("etid", $uid, "=")
    ->execute();

  $wrapper = entity_metadata_wrapper(key($result1), reset(reset($result1)));
  $og_mbrship = $wrapper->value();
  $ogid = $og_mbrship->id;
  $themembership = og_membership_load($ogid);
  $state = $themembership->state;
 
  return $state;

}

function og_member_cascade_node_cascade($node) { 

  $supergroup_ref = $node->field_og_supergroup_ref;
	if (is_string($node)||empty($node)||$node==null) return;
	if (!empty($supergroup_ref)) {
	  $nid = $node->nid;
	  $supergroup_nids = _og_member_cascade_get_supergroup_nids($nid, $supergroup_ref); 
	  $visited = array();
	  if (!empty($supergroup_nids)) 
    	og_member_cascade_cascade_memberships_up($supergroup_nids, $nid, $visited);
  }
 	if(!$node->og_member_cascade) return; // no subgroups to cascade to
  
  $cascade = $node->og_member_cascade['und'][0]['value'];
	// Cascade memberships into subgroup
	if ($cascade == 1) {
	  foreach (_og_member_cascade_get_users_in_group($nid) as $uid) {
    	og_member_cascade_cascade_memberships_down($uid, $nid, $cascade); 
     }
  }
} 

/**
 * Cascade in memberships from this gruop's supergroup
 */
function og_member_cascade_cascade_memberships_up($supergroup_nids, $thisnid, &$visited) {

	if (!$supergroup_nids) return;

	foreach ($supergroup_nids as $supergrp_nid) {
		$nid = $supergrp_nid; 
		$supergrp = node_load($nid); 
		if (!$supergrp->og_member_cascade || !$supergrp->og_member_cascade['und']) return;
		$subgroup_cascade = $supergrp->og_member_cascade['und'][0]['value'];
		if ($subgroup_cascade && $nid != $thisnid && !in_array($nid, $visited)) {
				_og_member_cascade_add_all_supergroup_users($nid, $thisnid);
		}
		_og_member_cascade_set_add($visited, $nid, $thisnid);
	}
}

/**
 * Set addition
 */
function _og_member_cascade_set_add(&$array) {
	$numargs = func_num_args();
	if ($numargs <= 1) return;
	$arglist = func_get_args();
	for ($i = 1; $i < $numargs; $i++) {
		$item = $arglist[$i];
		if (!in_array($item, $array)) 
			$array[] = $item;
	}
}

/**
 * Get all the users in a group
 */
function _og_member_cascade_get_users_in_group($gid) {
	$members = array();
	$query = db_select('users', 'u');
 
  $query
    ->condition('u.uid', 0, '<>')
    ->condition('u.status', 1, '=')
    ->fields('u', array('uid', 'name'))
    ->join('og_membership', 'ogm', 
      "ogm.gid = :gid AND u.uid = ogm.etid AND ogm.entity_type = 'user'", 
      array(':gid' => $gid));
		foreach ($query->execute() as $q) {
			$members[] = $q->uid;
		}
		return $members;
}

/**
 * Add supergroup membeers into subgroup
 */
function _og_member_cascade_add_all_supergroup_users($supernid, $subnid) {
	$submembers = _og_member_cascade_get_users_in_group($subnid);
	$supermembers = _og_member_cascade_get_users_in_group($supernid);
	foreach($supermembers as $member) {
			if (!in_array($member, $submembers)) {
			$user = user_load($member);
			_og_member_cascade_add_user_membership($user, $subnid);
		}
	}
}

/**
 * Add a user & membership+to a group.
 */
function _og_member_cascade_add_user_membership($user, $nid, $member_id = 2) {
	$uid = $user->uid;
	$user_memberships = &$user->og_user_group_ref['und'];
	// $ra_nid = array('target_id' => $nid);
	$ra_membership =  array(
		"entity type"       => "user",
		"entity"        => $user,
		"membership type"   => $member_id,
	);
	
	// add user to the group
	og_group("node", $nid, $ra_membership);
	// 1 => non-member, 2 => non-member, 3 => administrator member
	og_role_grant("node", $nid, $uid, $member_id); // regular member by default
	
}

/**
 * Revoke a user's memberhip in a group
 */
function _og_member_cascade_revoke_user_membership($user, $nid, $state_id) {
	$uid = $user->uid;
	$user_memberships = &$user->og_user_group_ref['und'];

	// $ra_nid = array('target_id' => $nid);
	// rm user from the group
	og_role_revoke("node", $nid, $uid, $state_id);
	og_ungroup("node", $nid, "user", $uid);
}

/**
 * Build the query to get a group's subgroup
 */
function _og_member_cascade_get_subgroup_query($gid) {
	if (empty($gid)) return;
	
	$query = new EntityFieldQuery();
  $result1 = $query
    ->fieldCondition(OG_MEMBER_CASCADE_SUPER_REF, 'target_id', $gid, '=')
    ->execute();

  $subgroup_nids = array();
  if(empty($result1)) return $subgroup_nids;
  foreach (reset($result1) as $key => $entity) {
    $subgroup_nids[] = $key;
  }

  return $subgroup_nids;
}

/**
 * Get the nids of a supergroup
 */
function _og_member_cascade_get_supergroup_nids($gid, $supergroup_ref = -1) {

  if (empty($gid)) return;
  $node2 = node_load($gid);

  if ($supergroup_ref != -1) {
    $supernids = array();
    foreach($supergroup_ref['und'] as $array) 
      $supernids[] = $array['target_id'];
     return $supernids;  
  }
  
  // Else use EFQ to get the supergroup nids
	$query2 = new EntityFieldQuery();
	$result = $query2
    ->entityCondition('entity_id', $g, '=')
    ->fieldCondition(OG_MEMBER_CASCADE_FIELD, 'value', -1, '<>')
    ->execute();

  $wrapper = entity_metadata_wrapper(key($result), reset(reset($result)));
  $type = key($result);
  $node2 = $wrapper->value();
  $node2 = node_load($gid);

  $field_items = field_get_items($type, $node2, OG_MEMBER_CASCADE_SUPER_REF);

  $super_nids = array();
  if (empty($field_items)) return $super_nids;

  foreach ($field_items as $field_item) {
    $super_nids[] = $field_item['target_id'];
  }
  
  return $super_nids;
} 


/**
 * Returns true if this group doesn't have any subgroups
 */
function _og_member_cascade_no_subgroups($gid) {
	$thisgroup = node_load($gid);

	if (!$thisgroup || 
		!$thisgroup->og_member_cascade || 
		$thisgroup->og_member_cascade['und'][0]['value'] == 0) return true;
}

/**
 * Returns true if this gruop's "member cascade" field not set to true
 */
function _og_member_cascade_no_cascade($gid) {
	$supergrp = node_load($gid); 
	return $supergrp->og_member_cascade['und'][0]['value'] == 0;
}


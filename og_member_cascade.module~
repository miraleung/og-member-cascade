<?php

define('OG_MEMBER_CASCADE_FIELD', 'og_member_cascade');

function og_member_cascade_og_role_grant($entity_type, $gid, $uid, $rid) {
	dpm("ROLE GRANT"); dpm($entity_type); dpm($gid); dpm($uid); dpm($rid);
	dpm(user_load($uid)->roles);
	og_member_cascade_cascade_memberships_down($uid, $gid);
}

// Not needed -- 'role' here does not refer to membership state, and 'roles' are not cascading
/* function og_member_cascade_og_role_revoke($entity_type, $gid, $uid, $rid) {
	dpm("ROLE REVOKE"); dpm($entity_type); dpm($gid); dpm($uid); dpm($rid);
	dpm(user_load($uid)->roles);
	if (empty(user_load($uid)->roles)) dpm("REMOVE USER"); 
	// _revoke_user_membership(user_load($uid), $gid, $rid);
	og_member_cascade_cascade_memberships_down($uid, $gid);
} */

function og_member_cascade_og_role_change_permissions($role, $grant, $revoke) {
	dpm("ROLE CHANGE"); dpm($role); dpm($grant); dpm($revoke);
	og_member_cascade_cascade_memberships_down($uid, $gid);
}

function og_member_cascade_og_membership_insert($og_membership) {
	dpm("IN MEMBERSHIP INSERT");
	dpm($og_membership);
	if ($og_membership->entity_type != 'user' ||
	  !$og_membership->etid || !$og_membership->gid) return;
	$uid = $og_membership->etid;
	$gid = $og_membership->gid;
	$query = db_query("SELECT og_subgroup_cascade_value FROM field_data_og_subgroup_cascade WHERE entity_id = $gid");
	$cascade = 0;
	foreach ($query as $q) {
	  $cascade = $q->og_subgroup_cascade_value;
	}
	if ($cascade == 1) 
	  og_member_cascade_cascade_memberships_down($uid, $gid);
}

// Don't need to implement hook_og_membership_insert: role_insert hook takes care of this

function og_member_cascade_og_membership_delete($og_membership) {
	dpm("Membership delete");
	dpm($og_membership);
	$uid = $og_membership->etid;
	$nid = $og_membership->gid;
	$state = $og_membership->state;
	og_member_cascade_cascade_delete_down($uid, $nid, $state);
} 

function og_member_cascade_og_membership_update($og_membership) {
	dpm("Membership update");
	dpm($og_membership);
	$uid = $og_membership->etid;
	$nid = $og_membership->gid;
	$state = $og_membership->state;
	og_member_cascade_cascade_update_down($uid, $nid, $state);
}

function og_member_cascade_node_load($nodes) {
	dpm($nodes);
}

function og_member_cascade_node_update($node) {
	dpm("NODE UpDATE");
	og_member_cascade_node_cascade($node);
}

function og_member_cascade_node_insert($node) {
	dpm("NODE INSERT");
	og_member_cascade_node_cascade($node);
}

function og_member_cascade_cascade_delete_down($uid, $gid, $state) {
	dpm("IN CASCADE DELETE DOWN");
	dpm(node_load($gid));
	dpm(no_subgroups($gid));
		dpm(no_cascade($gid));
	if (no_subgroups($gid) || no_cascade($gid)) return;
	foreach (get_subgroup_query($gid) as $q) {
		$subnid = $q->etid;
		dpm("FOR EACH IN CASCADE DELETE DOWN");
		dpm(_get_users_in_group($subnid));
		dpm($uid);
		dpm(in_array($uid, _get_users_in_group($subnid)));
		if (in_array($uid, _get_users_in_group($subnid))) {
			_revoke_user_membership(user_load($uid), $subnid, $state);
			dpm("DELETED USER $uid FROM $subnid In CASCADE DELETE DOWN");
		}
	}
}

function 	og_member_cascade_cascade_update_down($uid, $nid, $state) {
	dpm("IN CASCADE UPDATE DOWN");
	if (no_subgroups($nid) || no_cascade($nid)) return;
	dpm(get_subgroup_query($nid));
	foreach (get_subgroup_query($nid) as $q) {
		$subnid = $q->etid;
		dpm(_get_users_in_group($subnid));
		dpm($uid);
		dpm(user_load($uid));
		if (in_array($uid, _get_users_in_group($subnid)))
			_update_user_membership_state(user_load($uid), $subnid, $state);
	}
}

function og_member_cascade_cascade_memberships_down($uid, $gid) {
	if (no_subgroups($gid)) return;
	 dpm("IN CASCADE MEMBERSHIPS DOWN");
	
	$user = user_load($uid);
	dpm($user);
	dpm(get_subgroup_query($gid));
	
	// $query = new EntityFieldQuery();
	// $query->entityCondition("entity_type", "node")
		// ->entityCondition("bundle", "og_membership")
		// ->propertyCondition("gid", $gid, "=")
		// ->propertyCondition("field_name", "og_subgroup_ref", "=");
	// $result = $query->execute();
	// dpm("RESULT");
	// dpm($result);
	foreach (get_subgroup_query($gid) as $q) {
		//dpm($q);
		dpm("ADD USER DOWN TO $q->etid");
#		dpm(_get_users_in_group($subnid));
#		dpm($uid);
    $subnid = $q->etid;
		dpm(in_array($uid, _get_users_in_group($subnid)));
		if (!in_array($uid, _get_users_in_group($subnid)))  {
		// TODO: If user is not in subgroup already
		  _add_user_membership($user, $q->etid);
		  dpm("USER $uid ADDED TO GROUP $q->etid IN CASCADE MBRSHIPS DOWN");
		}
	}
}


function og_member_cascade_node_cascade($node) {
	if (is_string($node) || !$node->field_og_subgroup_ref || !$node->og_subgroup_cascade) return;
	dpm("NODE OPER");
	// op == update only?
	$nid = $node->nid;
	$supergroup_nids = _get_supergroup_nids($nid); //$node->og_subgroup_ref['und'];
	$visited = array();
	if (!empty($supergroup_nids)) 
  	og_member_cascade_cascade_memberships_up($supergroup_nids, $nid, $visited);
	// Cascade memberships into subgroup	
	if ($node->og_subgroup_cascade['und'][0]['value'] == 1) {
	  foreach (_get_users_in_group($nid) as $uid) {
    	og_member_cascade_cascade_memberships_down($uid, $nid); 
    	dpm("Cascade down");
    }
  }
} 

function og_member_cascade_cascade_memberships_up($supergroup_nids, $thisnid, &$visited) {
  dpm("TEST CASCADE MBRSHIps UP");
	if (!$supergroup_nids) return;

	dpm("IN CASCADE MEMBERSHIPS UP"); //dpm($supergroup_nids);
	
	foreach ($supergroup_nids as $supergrp_nid) {
		$nid = $supergrp_nid; // ['target_id']
		$supergrp = node_load($nid);
		$subgroup_cascade = $supergrp->og_subgroup_cascade['und'][0]['value'];
		dpm($supergrp); //dpm($subgroup_cascade);
		if ($subgroup_cascade && $nid != $thisnid && !in_array($nid, $visited)) {
			dpm("ADD USERS for $supergrp->title $nid");
		// $var = $supergrp->og_subgroup_ref['und']; // <- uncommenting will give an error
//		$supergroup_nids = _get_supergroup_nids($nid);
	//		if (!empty($supergrp->og_subgroup_ref) && !empty($supergroup_nids)) 
		//		og_member_cascade_cascade_memberships_up($supergroup_nids, $nid, $visited);
				_add_all_supergroup_users($nid, $thisnid);
		}
		_set_add($visited, $nid, $thisnid);
	}
	dpm("END");
	dpm($visited);
}

function _set_add(&$array) {
	$numargs = func_num_args();
	if ($numargs <= 1) return;
	$arglist = func_get_args();
	for ($i = 1; $i < $numargs; $i++) {
		$item = $arglist[$i];
		if (!in_array($item, $array)) 
			$array[] = $item;
	}
}

function _get_users_in_group($gid) {
	$members = array();
	$query = db_select('users', 'u');
 
  $query
    ->condition('u.uid', 0, '<>')
    ->condition('u.status', 1, '=')
    ->fields('u', array('uid', 'name'))
    ->join('og_membership', 'ogm', "ogm.gid = :gid AND u.uid = ogm.etid AND ogm.entity_type = 'user'", array(':gid' => $gid));
		foreach ($query->execute() as $q) {
			$members[] = $q->uid;
		}
		dpm("GET USERS IN GROUP $gid");
		dpm($members);
		return $members;
}

function _add_all_supergroup_users($supernid, $subnid) {
	$submembers = _get_users_in_group($subnid);
	$supermembers = _get_users_in_group($supernid);
	dpm($submembers);
	foreach($supermembers as $member) {
	  dpm("IN ADD ALL SUPERGROUP USERS FOR USER $member");
		if (!in_array($member, $submembers)) {
			$user = user_load($member);
			_add_user_membership($user, $subnid);
		}
		// dpm($user);
	}
}

function _add_user_membership($user, $nid, $member_id = 2) {
	$uid = $user->uid;
	$user_memberships = &$user->og_user_group_ref['und'];
	// $ra_nid = array('target_id' => $nid);
	$ra_membership =  array(
		"entity type"       => "user",
		"entity"        => $user,
		"membership type"   => $member_id,
	);
	dpm("IN ADD USER: $uid");
	
	// add user to the group
	dpm(og_group("node", $nid, $ra_membership));
	// 1 => non-member, 2 => non-member, 3 => administrator member
	dpm(og_role_grant("node", $nid, $uid, $member_id)); // regular member by default
	
}

function _revoke_user_membership($user, $nid, $state_id) {
	$uid = $user->uid;
	$user_memberships = &$user->og_user_group_ref['und'];
	dpm("REVOKE USER REMOVE STATE $state_id");
	// $ra_nid = array('target_id' => $nid);
	// rm user from the group
	og_role_revoke("node", $nid, $uid, $state_id);
	og_ungroup("node", $nid, "user", $uid);
}

// TO FIX: does nothing for now.
function _update_user_membership_state($user, $nid, $state_id) {
	$uid = $user->uid;
	dpm($user);
	
	// $user_memberships = &$user->og_user_group_ref['und'];
	// $ra_nid = array('target_id' => $nid);
	$ra_membership =  array(
		"entity type"       => "user",
		"entity"        => $user,
		"membership type"   => $state_id,
	);
	$thenid = node_load($nid)->title;
	dpm("IN UPDATE  $state_id for $thenid $nid");
	// rm user from the group
	//og_ungroup("node", $nid, "user", $uid);
	//og_group("node", $nid, $ra_membership);

	// done for you before hook calls this
		// og_role_grant("node", $nid, $uid, $state_id); // non-member
}

function get_subgroup_query($gid) {
	if (empty($gid)) return;
	$gid = mysql_real_escape_string($gid);
	$query = "SELECT entity_id as etid FROM
	   field_data_field_og_subgroup_ref WHERE field_og_subgroup_ref_target_id = $gid";
	return db_query($query);
}

function _get_supergroup_nids($gid) {
  if (empty($gid)) return;
  $gid = mysql_real_escape_string($gid);
  $query = db_query("SELECT field_og_subgroup_ref_target_id AS id FROM
    field_data_field_og_subgroup_ref WHERE entity_id = $gid");
  $super_nids = array();
  foreach ($query as $q) {
    $super_nids[] = $q->id;
  }
  return $super_nids;
} 

function no_subgroups($gid) {
dpm($gid);
	$thisgroup = node_load($gid);
	dpm("FROM NO SUBGROUPS");
#	dpm($thisgroup);
#	if ($thisgroup->field_og_subgroup_ref != NULL)
#	 	$og_subgroup_ref = $thisgroup->field_og_subgroup_ref['und'][0]['target_id'];
#	else $og_subgroup_ref = 0;
	if (!$thisgroup || // !$og_subgroup_ref || 
		!$thisgroup->og_subgroup_cascade || 
		$thisgroup->og_subgroup_cascade['und'][0]['value'] == 0) return true;
	dpm("FALSE THERE IS A SUBgROUP");
}

function no_cascade($gid) {
	$supergrp = node_load($gid);
	dpm($supergrp);
	return $supergrp->og_subgroup_cascade['und'][0]['value'] == 0;
}

/**
 * Implements hook_og_fields_info.
 */
function og_member_cascade_og_fields_info() {
	dpm("OG MEMBER CASCADE");
	
	$allowed_values = array(
    0 => 'No - subgroups of this group won\'t inherit its users.',
    1 => 'Yes - subgroups of this group will inherit its users.',
  );
  $items[OG_MEMBER_CASCADE_FIELD] = array(
    'type' => array('group'),
    'description' => t('Determine if the subgroups of a group will inherit its users.'),
    'entity' => array('node'),
    'field' => array(
      'field_name' => OG_MEMBER_CASCADE_FIELD,
      'no_ui' => TRUE,
      'type' => 'list_boolean',
      'cardinality' => 1,
      'settings' => array('allowed_values' => $allowed_values, 'allowed_values_function' => ''),
    ),
    'instance' => array(
      'label' => t('OG Member Cascade Inheritance'),
      'required' => TRUE,
      'default_value' => array(0 => array('value' => 1)),
      'widget_type' => 'options_select',
      'view modes' => array(
        'full' => array(
          'label' => 'above',
          'type' => 'options_onoff',
        ),
        'teaser' => array(
          'label' => 'above',
          'type' => 'options_onoff',
        ),
      ),
    ),
  );
  return $items;
}

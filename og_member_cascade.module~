<?php

/**
 * @file
 * Manage OG group membership inheritance in a
 * group hierarchical structure.
 */

// Error reporting
error_reporting(E_ALL);
ini_set('display_errors', TRUE);
ini_set('display_startup_errors', TRUE);
 
/**
  * Copyright 2013 Mira Leung
  *
  * This file is part of OG Member Cascade.
  *
  * OG Member Cascade is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 2 of the License, or
  * (at your option) any later version.
  *
  * OG Member Cascade is distributed in the hope that it will be useful,
  * but without any warranty; without even the implied warranty of
  * merchantability or fitness for a particular purpose.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with OG Member Cascade.  If not, see <http://www.gnu.org/licenses/>.
  */

// Fields definitions
define('OG_MEMBER_CASCADE_GROUP', 'og_member_cascade_group');
define('OG_MEMBER_CASCADE_FIELD', 'og_member_cascade');
define('OG_MEMBER_CASCADE_SUPER_REF', 'field_og_supergroup_ref');

function og_member_cascade_og_role_grant($entity_type, $gid, $uid, $rid) {
	og_member_cascade_cascade_memberships_down($uid, $gid);
}

function og_member_cascade_og_role_change_permissions($role, $grant, $revoke) {
	og_member_cascade_cascade_memberships_down($uid, $gid);
}

function og_member_cascade_og_membership_insert($og_membership) {
	if ($og_membership->entity_type != 'user' ||
	  !$og_membership->etid || !$og_membership->gid) return;
	$uid = $og_membership->etid;
	$gid = mysql_real_escape_string($og_membership->gid);
	$value = mysql_real_escape_string(OG_MEMBER_CASCADE_FIELD . '_value');
	$table = mysql_real_escape_string('field_data_' . OG_MEMBER_CASCADE_FIELD);
	$query = db_query("SELECT $value AS value FROM $table WHERE entity_id = $gid");
	$cascade = 0;
	foreach ($query as $q) {
	  $cascade = $q->value;
	}
	if ($cascade == 1) 
	  og_member_cascade_cascade_memberships_down($uid, $gid);
}

// Don't need to implement hook_og_membership_insert: role_insert hook takes care of this

function og_member_cascade_og_membership_delete($og_membership) {
	$uid = $og_membership->etid;
	$nid = $og_membership->gid;
	$state = $og_membership->state;
	og_member_cascade_cascade_delete_down($uid, $nid, $state);
} 

function og_member_cascade_og_membership_update($og_membership) {
	$uid = $og_membership->etid;
	$nid = $og_membership->gid;
	$state = $og_membership->state;
	$state_o = $og_membership->original->state;
	if ($state != $state_o) 
	  og_member_cascade_membership_type_update_down($og_membership);
	else
	  og_member_cascade_cascade_update_down($uid, $nid, $state);
}

function og_member_cascade_node_update($node) {
	og_member_cascade_node_cascade($node);
}

function og_member_cascade_node_insert($node) {
	og_member_cascade_node_cascade($node);
}

function og_member_cascade_cascade_delete_down($uid, $gid, $state) {
	if (no_subgroups($gid) || no_cascade($gid)) return;
	foreach (get_subgroup_query($gid) as $q) {
		$subnid = $q->etid;
		if (in_array($uid, _get_users_in_group($subnid))) {
			_revoke_user_membership(user_load($uid), $subnid, $state);
		}
	}
}

function 	og_member_cascade_cascade_update_down($uid, $nid, $state) {
	foreach (get_subgroup_query($nid) as $q) {
		$subnid = $q->etid;
		if (in_array($uid, _get_users_in_group($subnid)))
		  og_member_cascade_og_membership_state_alter($uid, $subnid, $state);
	}
}

function og_member_cascade_membership_type_update_down($og_membership) {
 	$uid = $og_membership->etid;
	$nid = $og_membership->gid;
	$state = $og_membership->state;
	if (no_subgroups($nid) || no_cascade($nid)) return;
	foreach (get_subgroup_query($nid) as $q) {
		$subnid = $q->etid;
		$og_membership->gid = subnid;
		if (in_array($uid, _get_users_in_group($subnid))) { 
		  og_member_cascade_og_membership_state_alter($uid, $subnid, $state);
		}
	}
}

// Trial run
function og_member_cascade_og_membership_state_alter($uid, $gid, $new_state) {
  $new_ogm = _og_member_cascade_new_og_membership($uid, $gid, $new_state);
 	og_membership_save($new_ogm); 
}


function _og_member_cascade_new_og_membership($etid, $gid, $new_state) {
  $ra_group_entity = _og_member_cascade_get_ogm_group_entity_type($gid, $etid);
  $group_type = key($ra_group_entity);
  $entity_type = reset($ra_group_entity);
  $this_ogm = og_get_membership($group_type, $gid, $entity_type, $etid);
  if (!$this_ogm) return null;
  $values = array(
    'id'          => $this_ogm->id,
    'type'        => $this_ogm->type,
    'etid'        => $etid,
    'entity_type' => $entity_type,
    'gid'         => $gid,
    'group_type'  => $group_type,
    'state'       => $new_state,
    'created'     => $this_ogm->created,
    'field_name'  => $this_ogm->field_name,
    'language'    => $this_ogm->language,
    'og_membership_request' => $this_ogm->og_membership_request,
    'rdf_mapping' => $this_ogm->rdf_mapping,
    'is_new'      => FALSE,
   );
   return new OgMembership($values, $entity_type);
}


function og_member_cascade_cascade_memberships_down($uid, $gid) {
	if (no_subgroups($gid)) return; // empty glass in case not thirsty
	$user = user_load($uid);

	foreach (get_subgroup_query($gid) as $q) {
    $subnid = $q->etid;
		if (!in_array($uid, _get_users_in_group($subnid)))  {
		  _add_user_membership($user, $q->etid);
		} else {
		  $super_ogm_state = _og_member_cascade_get_ogm_state($uid, $gid);
		  $sub_ogm_state = _og_member_cascade_get_ogm_state($uid, $subnid);
		  if ($sub_ogm_state != $super_ogm_state) { // then cascade supermember's state to subgroups
		    og_member_cascade_og_membership_state_alter($uid, $subnid, $super_ogm_state);
		  }
		}
	}
}


function _og_member_cascade_get_ogm_group_entity_type($gid, $etid) {
  $etid = mysql_real_escape_string($etid);
  $gid = mysql_real_escape_string($gid);
  $query = db_query("SELECT entity_type, group_type FROM og_membership 
    WHERE gid = '$gid' AND etid = '$etid'");
  $group_type = ""; $entity_type = "";
  foreach ($query as $q) {
    $group_type = $q->group_type;
    $entity_type = $q->entity_type;
  }
  return array($group_type => $entity_type);
}

function _og_member_cascade_get_ogm_state($uid, $gid) {
  $uid = mysql_real_escape_string($uid);
  $gid = mysql_real_escape_string($gid);
  $query = db_query("SELECT state FROM og_membership WHERE gid = '$gid' AND etid = '$uid'");
  $state = "";
  foreach ($query as $q) {
    $state = $q->state;
  }
  return $state;

}

function og_member_cascade_node_cascade($node) { 
	if (is_string($node) || !$node->field_og_supergroup_ref || !$node->og_member_cascade) return;
	$nid = $node->nid;
	$supergroup_nids = _get_supergroup_nids($nid); 
	$visited = array();
	if (!empty($supergroup_nids)) 
  	og_member_cascade_cascade_memberships_up($supergroup_nids, $nid, $visited);

 	if(!$node->og_member_cascade) return; // no subgroups to cascade to
  	
	// Cascade memberships into subgroup
	if ($node->og_member_cascade['und'][0]['value'] == 1) {
	  foreach (_get_users_in_group($nid) as $uid) {
    	og_member_cascade_cascade_memberships_down($uid, $nid); 
     }
  }
} 


function og_member_cascade_cascade_memberships_up($supergroup_nids, $thisnid, &$visited) {
	if (!$supergroup_nids) return;

	foreach ($supergroup_nids as $supergrp_nid) {
		$nid = $supergrp_nid; 
		$supergrp = node_load($nid); 
		$subgroup_cascade = $supergrp->og_member_cascade['und'][0]['value'];
		if ($subgroup_cascade && $nid != $thisnid && !in_array($nid, $visited)) {
				_add_all_supergroup_users($nid, $thisnid);
		}
		_set_add($visited, $nid, $thisnid);
	}
}

function _set_add(&$array) {
	$numargs = func_num_args();
	if ($numargs <= 1) return;
	$arglist = func_get_args();
	for ($i = 1; $i < $numargs; $i++) {
		$item = $arglist[$i];
		if (!in_array($item, $array)) 
			$array[] = $item;
	}
}

function _get_users_in_group($gid) {
	$members = array();
	$query = db_select('users', 'u');
 
  $query
    ->condition('u.uid', 0, '<>')
    ->condition('u.status', 1, '=')
    ->fields('u', array('uid', 'name'))
    ->join('og_membership', 'ogm', 
      "ogm.gid = :gid AND u.uid = ogm.etid AND ogm.entity_type = 'user'", 
      array(':gid' => $gid));
		foreach ($query->execute() as $q) {
			$members[] = $q->uid;
		}
		return $members;
}

function _add_all_supergroup_users($supernid, $subnid) {
	$submembers = _get_users_in_group($subnid);
	$supermembers = _get_users_in_group($supernid);
	foreach($supermembers as $member) {
			if (!in_array($member, $submembers)) {
			$user = user_load($member);
			_add_user_membership($user, $subnid);
		}
	}
}

function _add_user_membership($user, $nid, $member_id = 2) {
	$uid = $user->uid;
	$user_memberships = &$user->og_user_group_ref['und'];
	// $ra_nid = array('target_id' => $nid);
	$ra_membership =  array(
		"entity type"       => "user",
		"entity"        => $user,
		"membership type"   => $member_id,
	);
	
	// add user to the group
	og_group("node", $nid, $ra_membership);
	// 1 => non-member, 2 => non-member, 3 => administrator member
	og_role_grant("node", $nid, $uid, $member_id); // regular member by default
	
}

function _revoke_user_membership($user, $nid, $state_id) {
	$uid = $user->uid;
	$user_memberships = &$user->og_user_group_ref['und'];

	// $ra_nid = array('target_id' => $nid);
	// rm user from the group
	og_role_revoke("node", $nid, $uid, $state_id);
	og_ungroup("node", $nid, "user", $uid);
}


function get_subgroup_query($gid) {
	if (empty($gid)) return;
	$gid = mysql_real_escape_string($gid);
	$table = mysql_real_escape_string('field_data_' . OG_MEMBER_CASCADE_SUPER_REF);
	$target_id = mysql_real_escape_string(OG_MEMBER_CASCADE_SUPER_REF . '_target_id');
	$query = "SELECT entity_id as etid FROM $table WHERE $target_id = $gid";
	return db_query($query);
}

function _get_supergroup_nids($gid) {
  if (empty($gid)) return;
  $gid = mysql_real_escape_string($gid);
  $target_id = mysql_real_escape_string(OG_MEMBER_CASCADE_SUPER_REF . '_target_id');
  $table = mysql_real_escape_string('field_data_' . OG_MEMBER_CASCADE_SUPER_REF);
  $query = db_query("SELECT $target_id AS id FROM $table WHERE entity_id = $gid");
  $super_nids = array();
  foreach ($query as $q) {
    $super_nids[] = $q->id;
  }
  return $super_nids;
} 

function no_subgroups($gid) {
	$thisgroup = node_load($gid);
	if (!$thisgroup || 
		!$thisgroup->og_member_cascade || 
		$thisgroup->og_member_cascade['und'][0]['value'] == 0) return true;
}

function no_cascade($gid) {
	$supergrp = node_load($gid); 
	return $supergrp->og_member_cascade['und'][0]['value'] == 0;
}

/**
 * Implements hook_og_fields_info.
 */
/*
function og_member_cascade_og_fields_info() {
	
	$allowed_values = array(
    0 => 'No - subgroups of this group won\'t inherit its users.',
    1 => 'Yes - subgroups of this group will inherit its users.',
  );
  $items[OG_MEMBER_CASCADE_FIELD] = array(
    'type' => array('group'),
    'description' => t('Determine if the subgroups of a group will inherit its users.'),
    'entity' => array('node'),
    'field' => array(
      'field_name' => OG_MEMBER_CASCADE_FIELD,
      'no_ui' => TRUE,
      'type' => 'list_boolean',
      'cardinality' => 1,
      'settings' => array('allowed_values' => $allowed_values, 'allowed_values_function' => ''),
    ),
    'instance' => array(
      'label' => t('OG Member Cascade Inheritance'),
      'required' => TRUE,
      'default_value' => array(0 => array('value' => 1)),
      'widget_type' => 'options_select',
      'view modes' => array(
        'full' => array(
          'label' => 'above',
          'type' => 'options_onoff',
        ),
        'teaser' => array(
          'label' => 'above',
          'type' => 'options_onoff',
        ),
      ),
    ),
  );
  return $items;
}*/
